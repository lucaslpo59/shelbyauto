// üîπ Importa os m√≥dulos do Firebase
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js";
import { getFirestore, doc, getDoc, addDoc, collection } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";



// üîπ Configura√ß√£o do Firebase (use a mesma do seu projeto)
const firebaseConfig = {
    apiKey: "AIzaSyCmzjt8A60JQvqiARuqqySxZQ3EnxQ05Tw",
    authDomain: "shelbyauto-4c8f5.firebaseapp.com",
    projectId: "shelbyauto-4c8f5",
    storageBucket: "shelbyauto-4c8f5.appspot.com",
    messagingSenderId: "118535915272",
    appId: "1:118535915272:web:60912ed96a3d202175cebd",
    measurementId: "G-MYQG7J4YZK"
};

// üîπ Inicializa o Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// üîπ Garante que as informa√ß√µes do usu√°rio s√£o carregadas corretamente
onAuthStateChanged(auth, async (user) => {
    if (user) {
        console.log("‚úÖ Usu√°rio autenticado:", user.uid);

        // Atualiza o nome e a foto do usu√°rio no menu superior
        document.getElementById("userName").textContent = user.displayName || "Usu√°rio";
        document.getElementById("userAvatar").src = user.photoURL || "https://cdn.pixabay.com/photo/2018/04/18/18/56/user-3331256_1280.png";

        // üîπ Obt√©m dados adicionais do Firestore
        const userRef = doc(db, "users", user.uid);
        const docSnap = await getDoc(userRef);

        if (docSnap.exists()) {
            const userData = docSnap.data();

            // Atualiza o nome e a foto, se existirem no Firestore
            if (userData.displayName) {
                document.getElementById("userName").textContent = userData.displayName;
            }
            if (userData.photoURL) {
                document.getElementById("userAvatar").src = userData.photoURL;
            }
        } else {
            console.warn("‚ö†Ô∏è Nenhum documento encontrado no Firestore para este usu√°rio.");
        }
    } else {
        console.error("‚ùå Nenhum usu√°rio autenticado. Redirecionando...");
        window.location.href = "index.html"; // Redireciona para login
    }
});

// Fun√ß√£o para buscar os dados do usu√°rio autenticado
async function getUserData(userId) {
    try {
        const userDoc = await getDoc(doc(db, "users", userId));
        if (userDoc.exists()) {
            return userDoc.data(); // Retorna os dados do Firestore
        } else {
            console.error("‚ùå Usu√°rio n√£o encontrado no Firestore.");
            return null;
        }
    } catch (error) {
        console.error("‚ùå Erro ao buscar dados do Firestore:", error);
        return null;
    }
}


// üîπ Captura o clique do bot√£o de proposta
document.addEventListener("click", async (event) => {
    if (event.target.classList.contains("form-btn")) {
        const index = event.target.getAttribute("data-index");

        console.log(`Bot√£o ${index} clicado!`);

        // Verifica se o usu√°rio est√° autenticado
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                const userData = await getUserData(user.uid);
                if (!userData) {
                    alert("‚ùå Erro: N√£o foi poss√≠vel recuperar os dados do usu√°rio.");
                    return;
                }

                // üîπ Pegando os dados do usu√°rio autenticado
                const nome = userData.displayName || "Desconhecido";
                const discord = userData.discord || "N√£o informado";
                const celular = userData.celular || "N√£o informado";

                // üîπ Pegando os dados do carro correspondente
                const carro = carros[index];

                if (!carro) {
                    console.error("‚ùå Carro n√£o encontrado!");
                    alert("‚ùå Erro ao encontrar o carro.");
                    return;
                }

                // ‚úÖ Corre√ß√£o: Agora a l√≥gica est√° correta!
                const statusVenda = carro.vendido ? "üü¢ Dispon√≠vel" : "‚ùå Vendido";

                // üîπ URL do Webhook do Discord
                const webhookURL = "https://discord.com/api/webhooks/1343741774644117534/zoYLMvqda0hJRJNjDtBzE_3DNN9-EY651LjHIdpNSCygGjHE-Xjxln0uxjBSIbq8RiiZ";

                // üîπ Criando a mensagem para enviar ao Discord
                const mensagem = {
                    content: `üì© **Nova Proposta Recebida!** üì©\n\n` +
                             `üöó **Carro:** ${carro.nome}\n` +
                             `üí∞ **Pre√ßo:** ${carro.preco}\n` +
                             `üìä **FIPE:** ${carro.fipe}\n` +
                             `‚è≥ **KM:** ${carro.km}\n` +
                             `‚öô **C√¢mbio:** ${carro.cambio}\n` +
                             `üî¢ **Placa:** ${carro.placa}\n` +
                             `üìå **Status:** ${statusVenda}\n\n` +
                             `üë§ **Nome In-Game:** ${nome}\n` +
                             `üéÆ **Discord:** ${discord}\n` +
                             `üì± **Celular:** ${celular}`
                };

                // üîπ Enviando a mensagem para o Discord
                fetch(webhookURL, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(mensagem)
                })
                .then(response => {
                    if (response.ok) {
                        alert("‚úÖ Proposta enviada com sucesso!");
                    } else {
                        alert("‚ùå Erro ao enviar a proposta.");
                    }
                })
                .catch(error => {
                    alert("‚ùå Erro ao conectar com o Discord.");
                    console.error("Erro:", error);
                });

            } else {
                alert("‚ùå Voc√™ precisa estar autenticado para enviar uma proposta.");
            }
        });
    }
});

// üîπ Fun√ß√£o para verificar o login e bloquear o bot√£o
function verificarLogin() {
    onAuthStateChanged(auth, (user) => {
        const botoesProposta = document.querySelectorAll(".form-btn");

        botoesProposta.forEach(botao => {
            if (user) {
                botao.disabled = false; // ‚úÖ Habilita o bot√£o se estiver logado
                botao.style.opacity = "1"; // Mant√©m a apar√™ncia normal
                botao.style.cursor = "pointer";
            } else {
                botao.disabled = true; // ‚ùå Desabilita o bot√£o se n√£o estiver logado
                botao.style.opacity = "0.5"; // Deixa o bot√£o meio transparente
                botao.style.cursor = "not-allowed";
                botao.addEventListener("click", () => {
                    alert("‚ùå Voc√™ precisa estar logado para enviar uma proposta!");
                });
            }
        });
    });
}

// üîπ Chamar a fun√ß√£o ao carregar a p√°gina
document.addEventListener("DOMContentLoaded", verificarLogin);

document.addEventListener("DOMContentLoaded", () => {
    const logoutBtn = document.getElementById("logout");
    if (logoutBtn) {
        logoutBtn.addEventListener("click", async function(event) {
            event.preventDefault();

            try {
                await signOut(auth);
                console.log("‚úÖ Usu√°rio saiu com sucesso!");
                alert("Voc√™ saiu da conta!");
                
                // Verifica se realmente deslogou
                setTimeout(() => {
                    console.log("Usu√°rio ap√≥s logout:", auth.currentUser);
                }, 2000);
                
                window.location.href = "index.html";
            } catch (error) {
                console.error("‚ùå Erro ao sair:", error);
                alert("Erro ao sair. Verifique o console.");
            }
        });
    }
});